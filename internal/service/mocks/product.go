// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "products-crud/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *ProductService) CreateProduct(ctx context.Context, product *model.Product) error {
	ret := _m.Called(ctx, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductById provides a mock function with given fields: ctx, id
func (_m *ProductService) GetProductById(ctx context.Context, id uint64) (*model.ProductResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.ProductResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx
func (_m *ProductService) GetProducts(ctx context.Context) ([]*model.ProductResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ProductResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, id, product
func (_m *ProductService) UpdateProduct(ctx context.Context, id uint64, product *model.Product) (*model.ProductResponse, error) {
	ret := _m.Called(ctx, id, product)

	var r0 *model.ProductResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *model.Product) *model.ProductResponse); ok {
		r0 = rf(ctx, id, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, *model.Product) error); ok {
		r1 = rf(ctx, id, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
