// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "products-crud/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductRepository) GetAll(ctx context.Context) ([]*model.ProductEntity, error) {
	ret := _m.Called(ctx)

	var r0 []*model.ProductEntity
	if rf, ok := ret.Get(0).(func(context.Context) []*model.ProductEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, productId
func (_m *ProductRepository) GetById(ctx context.Context, productId uint64) (*model.ProductEntity, error) {
	ret := _m.Called(ctx, productId)

	var r0 *model.ProductEntity
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.ProductEntity); ok {
		r0 = rf(ctx, productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, pe
func (_m *ProductRepository) Save(ctx context.Context, pe *model.ProductEntity) error {
	ret := _m.Called(ctx, pe)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ProductEntity) error); ok {
		r0 = rf(ctx, pe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
